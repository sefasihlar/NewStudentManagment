// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLayer.Repository.Concreate;

#nullable disable

namespace NLayer.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230719064550_mig-Master")]
    partial class migMaster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Concreate.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Concreate.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5114),
                            Name = "Python",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5127),
                            WeekCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5128),
                            Name = "Java",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5128),
                            WeekCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5151),
                            Name = "Php",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5152),
                            WeekCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5152),
                            Name = "R",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5153),
                            WeekCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5154),
                            Name = "Javascript",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5154),
                            WeekCount = 0
                        });
                });

            modelBuilder.Entity("NLayer.Core.Concreate.ClassDay", b =>
                {
                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("DayId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassDays", (string)null);

                    b.HasData(
                        new
                        {
                            DayId = 1,
                            ClassId = 1
                        },
                        new
                        {
                            DayId = 2,
                            ClassId = 2
                        },
                        new
                        {
                            DayId = 3,
                            ClassId = 3
                        });
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyOffical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyPhone")
                        .HasColumnType("int");

                    b.Property<int>("CompanyPhone2")
                        .HasColumnType("int");

                    b.Property<string>("CompanyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficalAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficalPhone")
                        .HasColumnType("int");

                    b.Property<string>("OfficalSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficalTCKN")
                        .HasColumnType("int");

                    b.Property<string>("OfficalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Days", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5214),
                            Name = "Pazatesi",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5214)
                        },
                        new
                        {
                            Id = 2,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5215),
                            Name = "Salı",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5215)
                        },
                        new
                        {
                            Id = 3,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5216),
                            Name = "Çarşamba",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5216)
                        },
                        new
                        {
                            Id = 4,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5217),
                            Name = "Perşembe",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5218)
                        },
                        new
                        {
                            Id = 5,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5218),
                            Name = "Cuma",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5219)
                        },
                        new
                        {
                            Id = 6,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5219),
                            Name = "Cumartesi",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5220)
                        },
                        new
                        {
                            Id = 7,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5220),
                            Name = "Pazar",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5221)
                        });
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.DepartmentEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("DepartmentEmployees");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TCKN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrgentPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrgentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("bit");

                    b.Property<string>("Task")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Polling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PollingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Pollings");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("GuardianEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianSurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolClass")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Antalya/Kepez Kültür Mah. Galipkaya cad. BinaNo:29 NO:4",
                            ClassId = 1,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5279),
                            Gender = false,
                            GuardianName = "Hatice",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Çakır",
                            Name = "Ahmet",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Çakır",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5280)
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Antalya/Kepze Kültür Mah. Galipkaya cad. BinaNo:12 NO:1",
                            ClassId = 2,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5281),
                            Gender = true,
                            GuardianName = "Ahmet",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Topal",
                            Name = "Mehmet",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Topal",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5282)
                        },
                        new
                        {
                            Id = 3,
                            Adress = "Antalya/Kepez Kültür Mah. Galipkaya cad. BinaNo:76 NO:3",
                            ClassId = 1,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5283),
                            Gender = true,
                            GuardianName = "Hatice",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Bozkır",
                            Name = "Veli",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Bozkır",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5283)
                        },
                        new
                        {
                            Id = 4,
                            Adress = "Antalya/Kepez Kültür Mah. Galipkaya cad. BinaNo:5 NO:42",
                            ClassId = 3,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5284),
                            Gender = true,
                            GuardianName = "Hatice",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Kılınç",
                            Name = "Oğuzhan",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Kılınç",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5285)
                        },
                        new
                        {
                            Id = 5,
                            Adress = "Antalya/Kepez Kültür Mah. Galipkaya cad. BinaNo:2 NO:43",
                            ClassId = 1,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5286),
                            Gender = true,
                            GuardianName = "Hatice",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Bozkurt",
                            Name = "Metehan",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Bozkurt",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5286)
                        },
                        new
                        {
                            Id = 6,
                            Adress = "Antalya/Kepez Kültür Mah. Galipkaya cad. BinaNo:59 NO:44",
                            ClassId = 2,
                            Condition = true,
                            CreatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5287),
                            Gender = true,
                            GuardianName = "Yeliz",
                            GuardianPhone = "05525326858",
                            GuardianSurName = "Eroğlu",
                            Name = "İbrahim",
                            Price = 500,
                            SchoolClass = 0,
                            SurName = "Eroğlu",
                            UpdatedDate = new DateTime(2023, 7, 19, 9, 45, 50, 401, DateTimeKind.Local).AddTicks(5288)
                        });
                });

            modelBuilder.Entity("NLayer.Core.Concreate.StudentPolling", b =>
                {
                    b.Property<int>("PollingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("PollingId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPollings");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("bit");

                    b.Property<bool?>("Task")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int?>("AppRoleId")
                        .HasColumnType("int");

                    b.HasIndex("AppRoleId");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Concreate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Concreate.ClassDay", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Class", null)
                        .WithMany("ClassDays")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Concreate.Day", "Day")
                        .WithMany("ClassDays")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.DepartmentEmployees", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Concreate.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Employees", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Payment", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Polling", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Student", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.StudentPolling", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.Polling", "Polling")
                        .WithMany("StudentPollings")
                        .HasForeignKey("PollingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Concreate.Student", "Student")
                        .WithMany("StudentPollings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Polling");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.UserRole", b =>
                {
                    b.HasOne("NLayer.Core.Concreate.AppRole", null)
                        .WithMany("Users")
                        .HasForeignKey("AppRoleId");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.AppRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Class", b =>
                {
                    b.Navigation("ClassDays");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Day", b =>
                {
                    b.Navigation("ClassDays");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Polling", b =>
                {
                    b.Navigation("StudentPollings");
                });

            modelBuilder.Entity("NLayer.Core.Concreate.Student", b =>
                {
                    b.Navigation("StudentPollings");
                });
#pragma warning restore 612, 618
        }
    }
}
